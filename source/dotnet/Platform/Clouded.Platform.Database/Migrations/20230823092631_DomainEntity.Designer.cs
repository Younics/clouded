// <auto-generated />
using System;
using Clouded.Platform.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Clouded.Platform.Database.Migrations
{
    [DbContext(typeof(CloudedDbContext))]
    [Migration("20230823092631_DomainEntity")]
    partial class DomainEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("IdentityKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_key");

                    b.Property<string>("PasswordKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_key");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<string>("TokenKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_key");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("configurations_admin");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminNavigationGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("configurations_admin_navigation_groups");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminProviderDataSourceRelationEntity", b =>
                {
                    b.Property<long>("DataSourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("datasource_id");

                    b.Property<long>("AdminProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("admin_provider_id");

                    b.Property<bool>("HasUserSettingsTable")
                        .HasColumnType("boolean")
                        .HasColumnName("has_user_settings_table");

                    b.Property<string>("UserSettingsSchema")
                        .HasColumnType("text")
                        .HasColumnName("user_settings_schema");

                    b.HasKey("DataSourceId", "AdminProviderId");

                    b.HasIndex("AdminProviderId");

                    b.ToTable("admin_provider_datasource_relation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminTablesConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Columns")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("columns");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<long>("DataSourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("data_source_id");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("InMenu")
                        .HasColumnType("boolean")
                        .HasColumnName("in_menu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NavGroup")
                        .HasColumnType("text")
                        .HasColumnName("nav_group");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("SingularName")
                        .HasColumnType("text")
                        .HasColumnName("singular_name");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.Property<string>("VirtualColumns")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("virtual_columns");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("ProviderId");

                    b.ToTable("configurations_admin_tables");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminUserAccessConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("configurations_admin_user_access");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<bool>("Documentation")
                        .HasColumnType("boolean")
                        .HasColumnName("documentation");

                    b.Property<bool>("Management")
                        .HasColumnType("boolean")
                        .HasColumnName("management");

                    b.Property<string>("ManagementIdentityKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("management_identity_key");

                    b.Property<string>("ManagementPasswordKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("management_password_key");

                    b.Property<string>("ManagementTokenKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("management_token_key");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("configurations_auth");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthCorsConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AllowedHeaders")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("allowed_headers");

                    b.Property<string>("AllowedMethods")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("allowed_methods");

                    b.Property<string>("AllowedOrigins")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("allowed_origins");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("ExposedHeaders")
                        .HasColumnType("text")
                        .HasColumnName("exposed_headers");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer")
                        .HasColumnName("max_age");

                    b.Property<bool>("SupportsCredentials")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_credentials");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_cors");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthHashConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AlgorithmType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("algorithm_type");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_hash");

                    b.HasDiscriminator<string>("AlgorithmType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColumnId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_id");

                    b.Property<string>("ColumnIdentity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_identity");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("IdentityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_type");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schema");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.ToTable("configurations_auth_identity");

                    b.HasDiscriminator<string>("IdentityType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthMailConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Authentication")
                        .HasColumnType("boolean")
                        .HasColumnName("authentication");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("host");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("ResetPasswordReturnUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reset_password_return_url");

                    b.Property<string>("SocketOptions")
                        .HasColumnType("text")
                        .HasColumnName("socket_options");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("boolean")
                        .HasColumnName("use_ssl");

                    b.Property<string>("User")
                        .HasColumnType("text")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_mail");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthProviderFunctionRelationEntity", b =>
                {
                    b.Property<long>("FunctionId")
                        .HasColumnType("bigint")
                        .HasColumnName("function_id");

                    b.Property<long>("AuthProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("auth_provider_id");

                    b.Property<int?>("HookType")
                        .HasColumnType("integer")
                        .HasColumnName("hook_type");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.HasKey("FunctionId", "AuthProviderId");

                    b.HasIndex("AuthProviderId");

                    b.ToTable("provider_auth_function_relation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthSocialConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("DeniedRedirectUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("denied_redirect_url");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("redirect_url");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("configurations_auth_social");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthTokenConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessTokenExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_expiration");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.Property<string>("ValidIssuer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valid_issuer");

                    b.Property<bool>("ValidateAudience")
                        .HasColumnType("boolean")
                        .HasColumnName("validate_audience");

                    b.Property<bool>("ValidateIssuer")
                        .HasColumnType("boolean")
                        .HasColumnName("validate_issuer");

                    b.Property<bool>("ValidateIssuerSigningKey")
                        .HasColumnType("boolean")
                        .HasColumnName("validate_issuer_signing_key");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_token");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthUserAccessEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("configuration_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("configurations_auth_user_access");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DataSourceConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<long>("DataSourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("datasource_id");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("database");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("server");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId")
                        .IsUnique();

                    b.ToTable("configurations_datasource");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("datasources");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DomainEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("domains");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionConfigurationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<string>("RepositoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository_id");

                    b.Property<string>("RepositoryType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repository_type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("configurations_function");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("ExecutableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("executable_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("functions");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.PermissionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.ProjectUserRelationEntity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_user_relation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.ProviderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<DateTime?>("DeployedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed_at");

                    b.Property<long?>("DomainRecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("domain_record_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("providers");

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.RegionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("continent");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("regions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Bratislava",
                            Code = "EuSkBa",
                            Continent = "Europe",
                            State = "Slovakia"
                        });
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.RoleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.UserIntegrationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<long>("CreatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("created_ticks");

                    b.Property<string>("GithubOauthToken")
                        .HasColumnType("text")
                        .HasColumnName("github_oauth_token");

                    b.Property<string>("HarborPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("harbor_password");

                    b.Property<string>("HarborProject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("harbor_project");

                    b.Property<string>("HarborUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("harbor_user");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long?>("UpdatedTicks")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_ticks");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_integrations");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthHashArgon2ConfigurationEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.AuthHashConfigurationEntity");

                    b.Property<int>("DegreeOfParallelism")
                        .HasColumnType("integer")
                        .HasColumnName("argon2_degree_of_parallelism");

                    b.Property<int>("Iterations")
                        .HasColumnType("integer")
                        .HasColumnName("argon2_iterations");

                    b.Property<int>("MemorySize")
                        .HasColumnType("integer")
                        .HasColumnName("argon2_memory_size");

                    b.Property<int>("ReturnBytes")
                        .HasColumnType("integer")
                        .HasColumnName("argon2_return_bytes");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("argon2_type");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("argon2_version");

                    b.ToTable("configurations_auth_hash");

                    b.HasDiscriminator().HasValue("Argon2");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityOrganizationConfigurationEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.AuthIdentityConfigurationEntity");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_configuration_id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_identity");

                    b.HasDiscriminator().HasValue("Organization");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityPermissionConfigurationEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.AuthIdentityConfigurationEntity");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_configuration_id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_identity");

                    b.HasDiscriminator().HasValue("Permission");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityRoleConfigurationEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.AuthIdentityConfigurationEntity");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_configuration_id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_identity");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityUserConfigurationEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.AuthIdentityConfigurationEntity");

                    b.Property<string>("ColumnPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_password");

                    b.Property<long>("ConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_configuration_id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("configurations_auth_identity");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.ProviderEntity");

                    b.HasIndex("DomainRecordId");

                    b.HasIndex("ProjectId");

                    b.ToTable("providers");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthProviderEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.ProviderEntity");

                    b.Property<long>("DataSourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("datasource_id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("DomainRecordId");

                    b.HasIndex("ProjectId");

                    b.ToTable("providers");

                    b.HasDiscriminator().HasValue("Auth");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionProviderEntity", b =>
                {
                    b.HasBaseType("Clouded.Platform.Database.Entities.Clouded.ProviderEntity");

                    b.HasIndex("DomainRecordId");

                    b.HasIndex("ProjectId");

                    b.ToTable("providers");

                    b.HasDiscriminator().HasValue("Function");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", "Provider")
                        .WithOne("Configuration")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AdminConfigurationEntity", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminNavigationGroupEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", "Provider")
                        .WithMany("NavGroups")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminProviderDataSourceRelationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", "AdminProvider")
                        .WithMany("DataSourcesRelation")
                        .HasForeignKey("AdminProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", "DataSource")
                        .WithMany("UsingAdminProvidersRelation")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminProvider");

                    b.Navigation("DataSource");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminTablesConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", "DataSource")
                        .WithMany("UsingAdminTablesConfiguration")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", "Provider")
                        .WithMany("Tables")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminUserAccessConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", "Provider")
                        .WithMany("UserAccess")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthProviderEntity", "Provider")
                        .WithOne("Configuration")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthCorsConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("Cors")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthCorsConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthHashConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("Hash")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthHashConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthMailConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("Mail")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthMailConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthProviderFunctionRelationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthProviderEntity", "AuthProvider")
                        .WithMany("HooksRelation")
                        .HasForeignKey("AuthProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.FunctionEntity", "Function")
                        .WithMany("UsingAuthProvidersRelation")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthProvider");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthSocialConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithMany("SocialConfiguration")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthTokenConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("Token")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthTokenConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthUserAccessEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithMany("UserAccess")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DataSourceConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", "DataSource")
                        .WithOne("Configuration")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.DataSourceConfigurationEntity", "DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", "Project")
                        .WithMany("DataSources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DomainEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", "Project")
                        .WithMany("Domains")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.FunctionProviderEntity", "Provider")
                        .WithOne("Configuration")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.FunctionConfigurationEntity", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.FunctionProviderEntity", "Provider")
                        .WithMany("Functions")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.RegionEntity", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.ProjectUserRelationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", "Project")
                        .WithMany("UsersRelation")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.UserEntity", "User")
                        .WithMany("ProjectsRelation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.UserIntegrationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.UserEntity", "User")
                        .WithOne("Integration")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.UserIntegrationEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityOrganizationConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("IdentityOrganization")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthIdentityOrganizationConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityPermissionConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("IdentityPermission")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthIdentityPermissionConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityRoleConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("IdentityRole")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthIdentityRoleConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthIdentityUserConfigurationEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", "Configuration")
                        .WithOne("IdentityUser")
                        .HasForeignKey("Clouded.Platform.Database.Entities.Clouded.AuthIdentityUserConfigurationEntity", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DomainEntity", "Domain")
                        .WithMany("AdminProviders")
                        .HasForeignKey("DomainRecordId");

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", "Project")
                        .WithMany("AdminProviders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthProviderEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", "DataSource")
                        .WithMany()
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DomainEntity", "Domain")
                        .WithMany("AuthProviders")
                        .HasForeignKey("DomainRecordId");

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", "Project")
                        .WithMany("AuthProviders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("Domain");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionProviderEntity", b =>
                {
                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.DomainEntity", "Domain")
                        .WithMany("FunctionProviders")
                        .HasForeignKey("DomainRecordId");

                    b.HasOne("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", "Project")
                        .WithMany("FunctionProviders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthConfigurationEntity", b =>
                {
                    b.Navigation("Cors")
                        .IsRequired();

                    b.Navigation("Hash")
                        .IsRequired();

                    b.Navigation("IdentityOrganization");

                    b.Navigation("IdentityPermission");

                    b.Navigation("IdentityRole");

                    b.Navigation("IdentityUser");

                    b.Navigation("Mail");

                    b.Navigation("SocialConfiguration");

                    b.Navigation("Token")
                        .IsRequired();

                    b.Navigation("UserAccess");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DataSourceEntity", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("UsingAdminProvidersRelation");

                    b.Navigation("UsingAdminTablesConfiguration");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.DomainEntity", b =>
                {
                    b.Navigation("AdminProviders");

                    b.Navigation("AuthProviders");

                    b.Navigation("FunctionProviders");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionEntity", b =>
                {
                    b.Navigation("UsingAuthProvidersRelation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.ProjectEntity", b =>
                {
                    b.Navigation("AdminProviders");

                    b.Navigation("AuthProviders");

                    b.Navigation("DataSources");

                    b.Navigation("Domains");

                    b.Navigation("FunctionProviders");

                    b.Navigation("UsersRelation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.UserEntity", b =>
                {
                    b.Navigation("Integration")
                        .IsRequired();

                    b.Navigation("ProjectsRelation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AdminProviderEntity", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("DataSourcesRelation");

                    b.Navigation("NavGroups");

                    b.Navigation("Tables");

                    b.Navigation("UserAccess");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.AuthProviderEntity", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("HooksRelation");
                });

            modelBuilder.Entity("Clouded.Platform.Database.Entities.Clouded.FunctionProviderEntity", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Functions");
                });
#pragma warning restore 612, 618
        }
    }
}
