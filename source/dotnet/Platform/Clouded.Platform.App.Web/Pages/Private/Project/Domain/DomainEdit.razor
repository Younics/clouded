@using Clouded.Platform.Database.Entities.Clouded
@using Clouded.Platform.App.Web.Services.Interfaces
@inherits CancellableComponentBase
@page "/projects/{ProjectId}/domains/{DomainId}/edit"
@inject IDbContextResolver DbContextResolver
@inject IDomainService DomainService
@inject ISnackbar Snackbar

<PageTitle>@Project.Name | Domains - @Input?.Value</PageTitle>

@if (Input != null)
{
    <DomainForm Readonly="@false" Title="Domain edit" Model="@Input" OnValidSubmit="@OnValidSubmit" ProjectId="@ProjectId"/>
}

@code
{
    [Parameter]
    public string ProjectId { get; set; } = null!;

    [Parameter]
    public string DomainId { get; set; } = null!;

    [CascadingParameter(Name = "Project")]
    public ProjectEntity Project { get; set; } = null!;

    private DomainInput? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var domainEntity = await DbContextResolver
            .UseScopedContext<CloudedDbContext>()
            .GetAsync<DomainEntity>
            (
                entity =>
                    entity.Id == long.Parse(DomainId),
                CancellationToken
            );

        if (domainEntity != null)
        {
            Input = new DomainInput
            {
                Id = domainEntity.Id,
                Value = domainEntity.Value,
                ProjectId = domainEntity.ProjectId,
            };
        }
    }

    private async Task OnValidSubmit()
    {
        var domain = await DomainService.UpdateAsync(Input, cancellationToken: CancellationToken);

    //TODO: error handling

    // if (domain.Id != null)
    // {
        Snackbar.Add("Domain updated", Severity.Success);
        DomainService.GetDetailRoute(ProjectId, long.Parse(DomainId));
    // }
    // else
    // {
    //     Snackbar.Add("Daco se pokazilo");
    // }
    }
}