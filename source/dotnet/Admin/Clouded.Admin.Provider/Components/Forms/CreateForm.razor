@using Clouded.Admin.Provider.Extensions
@using Clouded.Admin.Provider.Helpers
@using Clouded.Core.DataSource.Api.Helpers
@using Clouded.Core.DataSource.Shared
@using Clouded.Function.Framework.Contexts
@using Clouded.Function.Framework.Contexts.Base
@using Clouded.Function.Library.Services
@using Clouded.Function.Shared
@using Clouded.Admin.Provider.Contexts
@using Clouded.Core.DataSource.Shared.Input
@using Npgsql
@inject ISnackbar Snackbar
@inject IFunctionService FunctionService
@inject IWebHostEnvironment Environment
@inject ApplicationOptions Options

<MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
    <MudGrid Spacing="4">
        <MudItem xs="12">
            <MudText Typo="Typo.h4">Create @(Table.SingularName?.ToLower() ?? Table.Name.ToLower())</MudText>
        </MudItem>

        <MudItem xs="12" md="12" lg="12">
            <MudPaper Class="pa-2">
                <MudText Class="mud-background rounded px-4 py-1 mb-2" Typo="Typo.h6">@(Table.SingularName ?? Table.Name) attributes</MudText>
                <GenericFields
                    IsInDrawer="@true"
                    FormType="@FormType.Create"
                    Options="@Table"
                    Context="@Context"
                    Columns="@Columns"
                    Relations="@InsideRelations"
                    PrefillEntityParam="@PrefillEntityParam"
                    @bind-Data="_entity"/>
            </MudPaper>
        </MudItem>

        <MudItem Class="d-flex justify-between" xs="12">
            <MudButton
                OnClick="OnCancel"
                StartIcon="@Icons.Material.Filled.KeyboardArrowLeft"
                Variant="Variant.Filled"
                Color="Color.Tertiary">
                @(CancelLabel)
            </MudButton>
            <div class="ml-auto">
                <MudButton
                    OnClick="OnSubmitAsync"
                    StartIcon="@Icons.Material.Filled.Check"
                    Variant="Variant.Filled"
                    Color="Color.Tertiary"
                    Class="ml-auto">
                    Create
                </MudButton>
            </div>
        </MudItem>
    </MudGrid>
</MudForm>

@code {

    [Parameter]
    public Action<DataSourceDictionary> OnSubmitClb { get; set; }

    [Parameter]
    public Action? OnCancelClb { get; set; }

    [Parameter]
    public string CancelLabel { get; set; } = "Cancel";

    [Parameter]
    public TableOptions? Table { get; set; }

    [Parameter]
    public bool IsInDrawer { get; set; }

    [Parameter]
    public AdminContext? Context { get; set; }

    [Parameter]
    public IEnumerable<ColumnResult>? Columns { get; set; }

    [Parameter]
    public IEnumerable<RelationResult>? InsideRelations { get; set; }

    [Parameter]
    public DataSourceDictionary? PrefillEntity { get; set; }

    [Parameter]
    public string? PrefillEntityParam { get; set; }

    private DataSourceDictionary? _entity = new();
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };

    protected override void OnInitialized()
    {
        if (PrefillEntity != null)
        {
            _entity[PrefillEntityParam] = PrefillEntity;
        }
    }

    private void OnCancel()
    {
        OnCancelClb?.Invoke();
    }

    private async Task OnSubmitAsync()
    {
        if (Table == null || Context == null || Columns == null || _entity == null)
            return;

        await _form?.Validate()!;
        if (!_success)
        {
            return;
        }

        var createData = _entity;

        foreach (var autoIncrementColumn in Columns.Where(i => i.IsAutoIncrement))
        {
            createData.Remove(autoIncrementColumn.Name);
        }

        if (InsideRelations != null)
        {
            foreach (var insideRelation in InsideRelations)
            {
                createData[insideRelation.Column] = (_entity[insideRelation.Column] as DataSourceDictionary)[insideRelation.TargetColumn];
            }
        }

        var loadedPaths = await FileHelper.LoadTmpFiles(Columns, _entity, createData);

    #region ValidationFunctions

        var ctx = new ValidationContext
        {
            Data = createData
        };
        var validationOutputs = await ctx.ExecuteValidationFunctions(
            FunctionService,
            Options.Clouded.Admin.FunctionProviders,
            Options.Clouded.Admin.GlobalCreateOperationFunctions,
            Table?.CreateOperationFunctions
            );
        if (validationOutputs.Any(i => !i.Passed))
        {
            Snackbar.Add("<b>Validation not passed:</b> <br><ul>" + string.Join("", validationOutputs
                .Where(i => !i.Passed)
                .Select(i => $"<li>{i.Message}</li>")
                ) + "</ul>", Severity.Error);
            return;
        }

    #endregion

    #region BeforeHooks

        Options.Clouded.Admin.GlobalCreateOperationFunctions?.BeforeHooks?.ExecuteVoidHooks(EFunctionType.BeforeHook, Options.Clouded.Admin.FunctionProviders, FunctionService, new HookContext { Data = createData });
        Table?.CreateOperationFunctions?.BeforeHooks?.ExecuteVoidHooks(EFunctionType.BeforeHook, Options.Clouded.Admin.FunctionProviders, FunctionService, new HookContext { Data = createData });

    #endregion

    #region InputHooks

        if (Options.Clouded.Admin.GlobalCreateOperationFunctions?.InputHooks != null)
        {
            createData = await Options.Clouded.Admin.GlobalCreateOperationFunctions?.InputHooks?.ExecuteDataHooks(EFunctionType.InputHook, Options.Clouded.Admin.FunctionProviders, FunctionService, new HookContext { Data = createData });    
        }
        if (Table?.CreateOperationFunctions?.InputHooks != null)
        {
            createData = await Table?.CreateOperationFunctions?.InputHooks?.ExecuteDataHooks(EFunctionType.InputHook, Options.Clouded.Admin.FunctionProviders, FunctionService, new HookContext { Data = createData });    
        }
        
    #endregion

        try
        {
            var createdEntity = Context.Create<DataSourceDictionary>
                (
                    new CreateInput
                    {
                        Schema = Table.Schema,
                        Table = Table.Table,
                        Data = createData,
                        ReturnColumns = new[] { "*" }
                    }
                );

            loadedPaths.DeleteFiles();

            Snackbar.Add("Created", Severity.Success);

    #region AfterHooks

            Options.Clouded.Admin.GlobalCreateOperationFunctions?.AfterHooks?.ExecuteVoidHooks(EFunctionType.AfterHook, Options.Clouded.Admin.FunctionProviders, FunctionService, new HookContext { Data = createdEntity });
            Table?.CreateOperationFunctions?.AfterHooks?.ExecuteVoidHooks(EFunctionType.AfterHook, Options.Clouded.Admin.FunctionProviders, FunctionService, new HookContext { Data = createdEntity });

    #endregion

            OnSubmitClb?.Invoke(createdEntity);
        }
        catch (PostgresException e)
        {
            Snackbar.Add($"Database exception: {e.MessageText}", Severity.Error);
        }
    }

}